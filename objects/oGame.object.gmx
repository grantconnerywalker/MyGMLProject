<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// TODO spawn an additional player to control after the player kills x enemies???

screen_shake_amount = 0

/* Enemy Spawning */
seconds_between_spawns = 1;
seconds_since_last_spawn = 0;


/* Global Constants */
player_bits = 16;
bits_regenerated = 0;


/* Game Start */

// Game start sound
audio_play_sound(aGameStart, 1, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Enemy Spawning */
seconds_since_last_spawn += 1/room_speed;

if seconds_since_last_spawn &gt;= seconds_between_spawns {
    // Spawn enemy
    seconds_since_last_spawn = 0;
    if choose(true, false) {
        randomX = random(room_width);
        randomY = choose(0, room_height);
    } else {
        randomX = choose(0, room_width);
        randomY = random(room_height);
    }
    
    // Loop should prevent enemy from spawning on Player
    while instance_exists(instance_place(x,y,oPlayer)) {
        randomX = random(room_width);
        randomY = random(room_height);        
    }
    instance_create(randomX, randomY, choose(oFaceEnemy,oExplodingEnemy,oExplodingEnemy)); // makes oExplodingEnemy 2x as likely to spawn
    
}

/*
// Does not work between sessions as a save system
if keyboard_check_pressed(vk_down) {
    game_save("filename")
}
if keyboard_check_pressed(vk_up) {
    game_load("filename")
}
*/

// If we've been told to shake the screen by any amount
if screen_shake_amount &gt; 0 {
    // Reduce that amount each frame (so we get back to 0 eventually and stabilize)
    screen_shake_amount -= 5
} else {
    // If we've stabilized or don't have screen shake
    screen_shake_amount = 0
    // Note default position of the view
    x = view_xview
    y = view_yview
}
// Apply any screen shake; view position should wobble from normal by amount (at 0 nothing happens)
shake_x = random_range(-screen_shake_amount, screen_shake_amount)
shake_y = random_range(-screen_shake_amount, screen_shake_amount)
view_wview = global.screen_width - abs(shake_x)
view_hview = global.screen_height - abs(shake_y)
view_angle = 0 + (shake_x/10)
view_xview = x + shake_x
view_yview = y + shake_y


// Don't need these anymore since we have a menu
/* Quitting */
/*if keyboard_check_pressed(vk_escape) {
    game_end();
}*/

/* Restarting */
/*if keyboard_check_pressed(ord('R')) {
    game_restart();
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
