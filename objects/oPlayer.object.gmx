<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_count = 0
selected_weapon_index = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */

var defaultSpeed = 300 / room_speed;
var playerSpeed = defaultSpeed;
var sprintButton = vk_shift;
var sprintModifier = 1.5;

// TODO look up why this has to be before the other checks in order to work
if keyboard_check(vk_shift) {
    /*show_debug_message("shift pressed");(*/
    playerSpeed = defaultSpeed * sprintModifier;
} else {
    playerSpeed = defaultSpeed;
}

if keyboard_check(ord('W')) {
    y -= playerSpeed;
}

if keyboard_check(ord('S')) {
    y += playerSpeed;
}

if keyboard_check(ord('A')) {
    x -= playerSpeed;
}

if keyboard_check(ord('D')) {
    x += playerSpeed;
}

/* Weapon Switching */

if mouse_check_button_pressed(mb_right) {
    // Switch to the next weapon up
    selected_weapon_index += 1
    // If we've gone too far, loop back to beginning
    if selected_weapon_index &gt;= weapon_count {
        selected_weapon_index = 0
    }
    audio_play_sound(aWeaponChange, 1, false);
}


/* Facing */

image_angle = point_direction(x, y, mouse_x, mouse_y);


/* Stay Inside Room */

if (x &lt; 0) {
    x = 0;
}
if (x &gt; room_width) {
    x = room_width;
}
if (y &lt; 0) {
    y = 0;
}
if (y &gt; room_height) {
    y = room_height;
}


/* Death */

enemy_touching_me = instance_place(x, y, oEnemy);
if (enemy_touching_me) {

    explode_into_number_of_chunks(oGame.player_bits, oPlayerChunk);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
