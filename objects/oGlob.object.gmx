<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLiquidShot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>seconds_until_splode = random_range(0.1,0.2)
sploding = false

puddle_lifetime = 2
seconds_until_fade = puddle_lifetime

host = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Destroy when leaving the room */
if (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) {
    instance_destroy()
}

// Hitting a wall (if about to hit a block, stop)
if place_meeting(x + hspeed, y + vspeed, oSolid) {
    speed = 0;
}

// Slowing down after shot
deceleration = 800 / (room_speed*room_speed)
if speed &gt; deceleration {
    speed -= deceleration
} else {
    speed = 0;
}

// Push an enemy away when hitting it
// (unless it's a swarmer, in which case stick to it)
if instance_exists(host) {

    // Follow the enemy we stuck to
    x = host.x
    y = host.y
    image_xscale = 1.5
    image_yscale = 1.5
    
} else {

    // Did we hit anyone?
    enemy_hit = instance_place(x,y,oEnemy)
    if instance_exists(enemy_hit) {
        // If so, is it the type we can stick to?
        if (enemy_hit.object_index == oSwarmer) {
            // Set host (remember who we hit)
            host = enemy_hit
            enemy_hit.kick_x += lengthdir_x(speed, direction)
            enemy_hit.kick_y += lengthdir_y(speed, direction)
        }
    }
    
    // Fading over time
    if (instance_exists(self.id)) {
        if (speed == 0) {
            // Grow larger and more transparent over time, then disappear
            seconds_until_fade -= 1/room_speed
            image_alpha = seconds_until_fade / puddle_lifetime
            image_xscale = 1 + (1 - image_alpha)
            image_yscale = image_xscale
            if (image_alpha &lt;= 0) {
                instance_destroy()
            }
            
            // Shrink over time, then disappear
            /*image_xscale -= (1.75 / room_speed)
            image_yscale = image_xscale
            if image_xscale &lt;= 0 { instance_destroy() }*/
        }
    }
}

/*
// Blowing up the water when hit
if (sploding) {
    seconds_until_splode -= 1/room_speed
    if seconds_until_splode &lt; 0 {
        instance_create(x,y,oSplosion)
        hit_by_projectile()
        instance_destroy()
    }
} else {
    projectile_hit = instance_place(x,y,oProjectile)
    if instance_exists(projectile_hit) {
        sploding = true
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
