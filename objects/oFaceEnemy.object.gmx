<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 10 / room_speed
initialize_enemy_collision(60, 360)
image_xscale = 0.5
image_yscale = image_xscale
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Drink Water Globs */
detection_range = 400
eat_range = 10
nearest_glob = instance_nearest(x,y,oLiquidShot)
// Is there a glob?
if instance_exists(nearest_glob) {
    // Can we detect it?
    distance_to_glob = point_distance(x,y,nearest_glob.x,nearest_glob.x)
    if distance_to_glob &lt; detection_range {
        // Can we get there?
        if i_have_line_of_sight_to(nearest_glob) {
            // Go toward glob
            direction = point_direction(x,y,nearest_glob.x,nearest_glob.y)
            if (distance_to_glob &lt; eat_range) {
                with nearest_glob { instance_destroy() }
                growth_rate = 0.1
                max_size = 2
                if (image_xscale &lt; max_size) {
                    image_xscale += growth_rate
                    image_yscale += growth_rate
                    if place_meeting(x,y,oSolid) {
                        image_xscale -= growth_rate
                        image_yscale -= growth_rate
                    }
                }
                // also increment number of globs eaten or something?
            }
        }
    }
}



/* Facing */

image_angle = direction;
stay_inside_room();
enemy_collision_with_solids()

/* Damage */

if hit_by_projectile() {
    
    audio_play_sound(aEnemyHit,1,false);
    
    // TODO make script for this called damage_standard_enemy()
    
    // Destruction based on sprite type, destroy if happy
    /*switch (sprite_index) {
        case sEnemy: 
            sprite_index = sEnemy_damaged;
            break;
        case sEnemy_damaged:
            sprite_index = sEnemy_happy;
            break;
        case sEnemy_happy:
            // Create power up
            instance_create(x,y,oPowerUp)
            
            // Destroy damaged enemy
            audio_play_sound(aEnemyDefeat,1,false);
            instance_destroy();
    }*/
    
    // Destruction based on image scale, destroy if small
    image_xscale *= 0.8;
    image_yscale *= 0.8;
    if (image_xscale &lt;= 0.6) {
        // Create new enemies
        for (i = 0; i &lt; 2; i +=1) {
            instance_create(random(room_width), random(room_height), oFaceEnemy);   
        }
        
        // Destroy damaged enemy
        instance_destroy();
    }
    
    // Destruction based on health, destroy if 0
    /*health -= 1;
    if (health &lt;= 0) {
        audio_play_sound(aEnemyDefeat,1,false);
        instance_destroy();
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
