<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sExplodingEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initialize_enemy_collision(70, 360);
state = "Idle" // Possible states: Idle, Alert

image_xscale = 0.5
image_yscale = image_xscale
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Some ai stuff */
if state = "Idle" {

    sprite_index = sExplodingEnemy

    // wander aimlessly
    if i_have_line_of_sight_to(oPlayer) {
        direction_to_player = point_direction(x,y,oPlayer.x,oPlayer.y)
        relative_direction_to_player = abs(image_angle - direction_to_player)
        field_of_view = 90
        
        if relative_direction_to_player &lt; (field_of_view/2) || relative_direction_to_player &gt; 360 - (field_of_view/2) {
            state = "Alert"
        }
    }

} else if state = "Alert" {

    sprite_index = sExplodingEnemyAlert

    // seek the player
    if i_have_line_of_sight_to(oPlayer) {
        direction = point_direction(x,y,oPlayer.x,oPlayer.y)    
    } else {
        state = "Idle"
    }

}


/* Facing */

image_angle = direction;
stay_inside_room()
enemy_collision_with_solids()


/* Damage */

if hit_by_projectile() {
    
    screen_shake(25)

    audio_play_sound(aEnemyHit,1,false);
    
    // Explode
    explode_into_number_of_chunks(25, oSwarmerChunk);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
